Streams
------

	En Stream existen operaciones intermedias o terminales, cuando una operacion es intermedia quiere 
	decir que devuelve un Stream y se puede seguir operando en cadena, pero si una operacion es 
	terminal quiere decir que en esa operacion acaba el stream con void o devuelve un resultado.
	
	Ejemplos de operaciones intermedias son:
		- filter
		- map
		- sorted
	
	Ejemplo de operaciones terminales son:
		- forEach
		- findFirst
		- collect


	Existen ademas de los Streams orientados a clases, los streams de primitivos, ejemplo: 
		IntStream, DoubleStream, LongStream
	Estos stream tienen operaciones adicionales como por ejemplo: average, sum, max.
	
	


Notas: 
	- Cuando se usa streams las operaciones realizadas con esta no modifican o alteran la lista
	  original.
	- Un stream codificado con un pipeline se ejecutara recien cuando se ejecute la operacion terminal.
	- De [4], los streams solo pueden ser usados una vez y no reusados, el stream se cierra cuando se usa una operacion terminal sobre ella, una forma de manejar
	  esto es usando un Supplier de Stream
	- La operacion terminal determina si se procesaran la totalidad o parte de los elementos del Stream.
	- En streams infinitos se necesita setear un limite para poder operar sobre el, mayormente se usa limit [6]
	
	

URLs:
	[1] http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/
	[2] http://www.baeldung.com/java-difference-map-and-flatmap
	[3] https://www.ibm.com/developerworks/library/j-java-streams-2-brian-goetz/index.html
	[4]	https://www.baeldung.com/java-stream-operated-upon-or-closed-exception
	[5] https://stackoverflow.com/questions/33635717/in-java-streams-is-peek-really-only-for-debugging
	[6] https://stackify.com/streams-guide-java-8/